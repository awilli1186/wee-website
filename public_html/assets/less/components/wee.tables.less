.wee-table () when (@tableEnabled = true) {
	.rules () {
		border-collapse: collapse;
		border-spacing: 0;
		empty-cells: show;
		min-width: 100%;
		table-layout: fixed;
		word-wrap: break-word;
		.font-size(@tableFontSize);
		.spaced();
		.wee-table-bordered();
		.wee-table-striped();
		td,
		th {
			text-align: left;
			vertical-align: top;
			.line-height(@tableCellLineHeight);
			.padding(@tableCellPaddingVertical; @tableCellPaddingHorizontal);
		}
		thead,
		tfoot {
			font-weight: @boldFontWeight;
			th {
				color: @darkestGray;
				vertical-align: bottom;
			}
		}
		caption {
			.background(@tableCaptionBackground);
			.font-style(@tableCaptionFontStyle);
			.padding(@tableCaptionPaddingVertical; @tableCaptionPaddingHorizontal);
		}
		img {
			vertical-align: top;
		}
	}
	.check () when (@tableStyled = true) {
		table,
		.table {
			.rules();
		}
	}
	.check () when not (@tableStyled = true) {
		.table {
			.rules();
		}
	}
	.check () when not (@tableBordered = true)
			and not (@tableBorderedClassModifier = false) {
		.@{tableBorderedClassModifier} {
			.wee-table-bordered(true);
		}
	}
	.check () when not (@tableStriped = true)
			and not (@tableStripedBackground = false)
			and not (@tableStripedClassModifier = false) {
		.@{tableStripedClassModifier} {
			.wee-table-striped(true);
		}
	}
	.check();
}

.wee-table-bordered (@output: @tableBordered) when (@output = true) {
	.border(bottom; @tableCellBorderColor);
	caption {
		.border(@tableCellBorderColor);
		border-bottom: 0;
	}
	td,
	th {
		.border(right; @tableCellBorderColor);
		.border(top; @tableCellBorderColor);
		&:first-child {
			.border(left; @tableCellBorderColor);
		}
	}
}

.wee-table-striped (@output: @tableStriped) when (@output = true) {
	tbody tr:nth-child(@{tableStripedPosition}) {
		td,
		th {
			.background(@tableStripedBackground);
		}
	}
}

.wee-table();