.wee-reset () {
	*,
	*:before,
	*:after {
		margin: 0;
		padding: 0;
		.box-sizing(border-box);
	}
	.wee-container-min-width () when not (@minWidth = 0)
			and not (@minWidth = false) {
		body,
		html {
			.min-width(@minWidth);
		}
	}
	.wee-container-min-width();
	html {
		-moz-text-size-adjust: 100%;
		-ms-text-size-adjust: 100%;
		-webkit-text-size-adjust: 100%;
		font-family: '"1"';
		.font-size(@rootFontSize);
	}
	body {
		color: @baseColor;
		position: relative;
		.background(@bodyBackground);
		.font(@baseFont; @baseFontSize; @baseFontWeight; @baseLineHeight);
	}
	main {
		display: block;
	}
	embed,
	img,
	object,
	video {
		max-width: 100%;
	}
	svg {
		overflow: hidden;
	}
	embed,
	object {
		height: 100%;
	}
	audio,
	canvas,
	video {
		display: inline-block;
	}
	abbr[title] {
		cursor: help;
		.check () when not (@abbrUnderline = none) {
			.border(bottom; @baseColor; 1px; @abbrUnderline);
		}
		.check();
	}
	b,
	strong {
		font-weight: @boldFontWeight;
	}
	mark {
		color: @markColor;
		.background(@markBackground);
	}
	canvas {
		-ms-touch-action: double-tap-zoom;
	}
	iframe {
		border: 0;
		.spaced()
	}
	figure {
		position: relative;
		text-align: center;
		.border(@figureBorderColor);
		.padding(@figurePadding);
		.rounded(@figureRounded);
		.spaced();
		img {
			.spaced();
		}
		figcaption {
			color: @figCaptionColor;
			font-style: @figCaptionFontStyle;
			.line-height(@figCaptionLineHeight);
		}
	}
	img {
		display: inline-block;
	}
	sub,
	sup {
		font-size: .7em;
		line-height: 0;
		margin-left: .2em;
		position: relative;
		vertical-align: baseline;
	}
	sub {
		bottom: -.25em;
	}
	sup {
		top: -1em;
	}
	.selection();





	/*------------------------------------*\
		# Typography
	\*------------------------------------*/

	.heading () {
		color: @headingColor;
		font-family: @headingFont;
		font-weight: @headingFontWeight;
		.line-height(@headingLineHeight);
		.spaced(@headingMarginBottom);
		small {
			font-weight: normal;
		}
	}
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		.heading();
	}
	.h1 () {
		.font-size(@h1);
		.heading();
	}
	h1 {
		.h1();
	}
	.h2 () {
		.font-size(@h2);
		.heading();
	}
	h2 {
		.h2();
	}
	.h3 () {
		.font-size(@h3);
		.heading();
	}
	h3 {
		.h3();
	}
	.h4 () {
		.font-size(@h4);
		.heading();
	}
	h4 {
		.h4();
	}
	.h5 () {
		.font-size(@h5);
		.heading();
	}
	h5 {
		.h5();
	}
	.h6 () {
		.font-size(@h6);
		.heading();
	}
	h6 {
		.h6();
	}
	p {
		color: @paragraphColor;
		font-weight: @paragraphFontWeight;
		.line-height(@paragraphLineHeight);
		.spaced(@paragraphMarginBottom);
	}
	small {
		.font-size(@smallFontSize);
	}
	dfn,
	em,
	i,
	var {
		font-style: italic;
	}
	blockquote,
	q {
		color: @quoteColor;
		.font(@quoteFont; @quoteFontSize; @quoteFontWeight; @quoteLineHeight; @quoteFontStyle);
		cite {
			color: @citeColor;
			.font(@citeFont; @citeFontSize; @citeFontWeight; @citeLineHeight; @citeFontStyle);
			.margin(top; @citeMarginTop);
			&:before {
				.content(@citeIndicator);
			}
		}
		p {
			color: @quoteColor;
		}
	}
	.blockquote () {
		.padding(@quotePaddingVertical; @quotePaddingHorizontal);
		.spaced();
		cite {
			display: block;
		}
	}
	blockquote {
		.blockquote();
	}
	del,
	s,
	strike {
		text-decoration: line-through;
	}
	a {
		color: @linkColor;
		text-decoration: @linkDecoration;
		&:focus {
			outline: thin dotted;
		}
		&:hover {
			color: @linkColorHover;
			.check () when not (@linkDecorationHover = false) {
				text-decoration: @linkDecorationHover;
			}
			.check();
		}
		&:active {
			color: @linkColorActive;
		}
		img {
			border: 0;
		}
	}
	.hr () {
		border: 0;
		display: block;
		height: 1px;
		.border(top; @ruleColor; @ruleHeight; @ruleStyle);
		.margin(vertical; @ruleMargin);
	}
	hr {
		.hr();
	}
	address {
		color: @addressColor;
		.font(@addressFont; @addressFontSize; @addressFontWeight; @addressLineHeight; @addressFontStyle);
		.spaced();
	}





	/*------------------------------------*\
		# Lists
	\*------------------------------------*/

	dl,
	ol,
	ul {
		color: @listColor;
		list-style-position: @listBulletPosition;
		.line-height(@listLineHeight);
		.spaced(@listMarginBottom);
		.check () when not (@liMarginBottom = false) {
			li {
				.spaced(@liMarginBottom);
			}
		}
		.check();
	}
	ol,
	ul {
		.margin(left; @listMarginLeft);
		ol,
		ul {
			margin-bottom: 0;
			.margin(left; @nestedListMarginLeft);
		}
	}
	ul {
		list-style-type: @listBulletStyle;
		ul {
			list-style-type: circle;
			ul {
				list-style-type: square;
			}
		}
	}
	ol {
		list-style-type: decimal;
	}
	nav {
		ol,
		ul {
			list-style: none;
			margin: 0;
			li {
				margin-bottom: 0;
			}
		}
	}
	dl {
		.spaced(@dlMarginBottom);
	}
	dt {
		color: @dtColor;
		.font(@dtFont; @dtFontSize);
		.spaced(@dtMarginBottom);
	}
	dd {
		color: @ddColor;
		.font(@ddFont; @ddFontSize);
		.spaced(@ddMarginBottom);
	}
}