{"version":3,"sources":["../../../../source/js/lib/vendor/CollapsibleLists.js"],"names":["CollapsibleLists","createClickListener","node","e","window","event","li","target","srcElement","nodeName","parentNode","toggle","open","className","match","uls","getElementsByTagName","index","length","style","display","replace","this","apply","doNotRecurse","document","applyTo","subUls","subIndex","lis","addEventListener","preventDefault","attachEvent","returnValue"],"mappings":"AAcA,GAAIA,kBACA,GAAI,YAkFF,QAASC,GAAoBC,GAG3B,MAAO,UAASC,GAGTA,IAAGA,EAAIC,OAAOC,MAInB,KADA,GAAIC,GAAMH,EAAEI,OAASJ,EAAEI,OAASJ,EAAEK,WACZ,MAAfF,EAAGG,UAAkBH,EAAKA,EAAGI,UAGhCJ,IAAMJ,GAAMS,EAAOT,IAW3B,QAASS,GAAOT,GAOd,IAAK,GAJDU,GAAOV,EAAKW,UAAUC,MAAM,mCAG5BC,EAAMb,EAAKc,qBAAqB,MAC3BC,EAAQ,EAAGA,EAAQF,EAAIG,OAAQD,IAAS,CAI/C,IADA,GAAIX,GAAKS,EAAIE,GACS,MAAfX,EAAGG,UAAkBH,EAAKA,EAAGI,UAGhCJ,IAAMJ,IAAMa,EAAIE,GAAOE,MAAMC,QAAWR,EAAO,QAAU,QAK/DV,EAAKW,UACDX,EAAKW,UAAUQ,QACX,yCAA0C,IAG9CN,EAAIG,OAAS,IACfhB,EAAKW,WAAa,oBAAsBD,EAAO,OAAS,WA5H5DU,KAAKC,MAAQ,SAASC,GAIpB,IAAK,GADDT,GAAMU,SAAST,qBAAqB,MAC/BC,EAAQ,EAAGA,EAAQF,EAAIG,OAAQD,IAGtC,GAAIF,EAAIE,GAAOJ,UAAUC,MAAM,+BAG7BQ,KAAKI,QAAQX,EAAIE,IAAQ,IAGpBO,GAIH,IAAK,GADDG,GAASZ,EAAIE,GAAOD,qBAAqB,MACpCY,EAAW,EAAGA,EAAWD,EAAOT,OAAQU,IAC/CD,EAAOC,GAAUf,WAAa,oBAgBxCS,KAAKI,QAAU,SAASxB,EAAMsB,GAI5B,IAAK,GADDK,GAAM3B,EAAKc,qBAAqB,MAC3BC,EAAQ,EAAGA,EAAQY,EAAIX,OAAQD,IAGjCO,GAAgBtB,GAAQ2B,EAAIZ,GAAOP,aAGlCmB,EAAIZ,GAAOa,iBACbD,EAAIZ,GAAOa,iBACP,YAAa,SAAU3B,GAAIA,EAAE4B,mBAAqB,GAEtDF,EAAIZ,GAAOe,YACP,gBAAiB,WAAY3B,MAAM4B,aAAc,IAInDJ,EAAIZ,GAAOa,iBACbD,EAAIZ,GAAOa,iBACP,QAAS7B,EAAoB4B,EAAIZ,KAAS,GAE9CY,EAAIZ,GAAOe,YACP,UAAW/B,EAAoB4B,EAAIZ,KAIzCN,EAAOkB,EAAIZ","file":"CollapsibleLists.min.js","sourcesContent":["/*\n\nCollapsibleLists.js\n\nAn object allowing lists to dynamically expand and collapse\n\nCreated by Stephen Morley - http://code.stephenmorley.org/ - and released under\nthe terms of the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\n// create the CollapsibleLists object\nvar CollapsibleLists =\n    new function(){\n\n      /* Makes all lists with the class 'collapsibleList' collapsible. The\n       * parameter is:\n       *\n       * doNotRecurse - true if sub-lists should not be made collapsible\n       */\n      this.apply = function(doNotRecurse){\n\n        // loop over the unordered lists\n        var uls = document.getElementsByTagName('ul');\n        for (var index = 0; index < uls.length; index ++){\n\n          // check whether this list should be made collapsible\n          if (uls[index].className.match(/(^| )collapsibleList( |$)/)){\n\n            // make this list collapsible\n            this.applyTo(uls[index], true);\n\n            // check whether sub-lists should also be made collapsible\n            if (!doNotRecurse){\n\n              // add the collapsibleList class to the sub-lists\n              var subUls = uls[index].getElementsByTagName('ul');\n              for (var subIndex = 0; subIndex < subUls.length; subIndex ++){\n                subUls[subIndex].className += ' collapsibleList';\n              }\n\n            }\n\n          }\n\n        }\n\n      };\n\n      /* Makes the specified list collapsible. The parameters are:\n       *\n       * node         - the list element\n       * doNotRecurse - true if sub-lists should not be made collapsible\n       */\n      this.applyTo = function(node, doNotRecurse){\n\n        // loop over the list items within this node\n        var lis = node.getElementsByTagName('li');\n        for (var index = 0; index < lis.length; index ++){\n\n          // check whether this list item should be collapsible\n          if (!doNotRecurse || node == lis[index].parentNode){\n\n            // prevent text from being selected unintentionally\n            if (lis[index].addEventListener){\n              lis[index].addEventListener(\n                  'mousedown', function (e){ e.preventDefault(); }, false);\n            }else{\n              lis[index].attachEvent(\n                  'onselectstart', function(){ event.returnValue = false; });\n            }\n\n            // add the click listener\n            if (lis[index].addEventListener){\n              lis[index].addEventListener(\n                  'click', createClickListener(lis[index]), false);\n            }else{\n              lis[index].attachEvent(\n                  'onclick', createClickListener(lis[index]));\n            }\n\n            // close the unordered lists within this list item\n            toggle(lis[index]);\n\n          }\n\n        }\n\n      };\n\n      /* Returns a function that toggles the display status of any unordered\n       * list elements within the specified node. The parameter is:\n       *\n       * node - the node containing the unordered list elements\n       */\n      function createClickListener(node){\n\n        // return the function\n        return function(e){\n\n          // ensure the event object is defined\n          if (!e) e = window.event;\n\n          // find the list item containing the target of the event\n          var li = (e.target ? e.target : e.srcElement);\n          while (li.nodeName != 'LI') li = li.parentNode;\n\n          // toggle the state of the node if it was the target of the event\n          if (li == node) toggle(node);\n\n        };\n\n      }\n\n      /* Opens or closes the unordered list elements directly within the\n       * specified node. The parameter is:\n       *\n       * node - the node containing the unordered list elements\n       */\n      function toggle(node){\n\n        // determine whether to open or close the unordered lists\n        var open = node.className.match(/(^| )collapsibleListClosed( |$)/);\n\n        // loop over the unordered list elements with the node\n        var uls = node.getElementsByTagName('ul');\n        for (var index = 0; index < uls.length; index ++){\n\n          // find the parent list item of this unordered list\n          var li = uls[index];\n          while (li.nodeName != 'LI') li = li.parentNode;\n\n          // style the unordered list if it is directly within this node\n          if (li == node) uls[index].style.display = (open ? 'block' : 'none');\n\n        }\n\n        // remove the current class from the node\n        node.className =\n            node.className.replace(\n                /(^| )collapsibleList(Open|Closed)( |$)/, '');\n\n        // if the node contains unordered lists, set its class\n        if (uls.length > 0){\n          node.className += ' collapsibleList' + (open ? 'Open' : 'Closed');\n        }\n\n      }\n\n    }();\n"]}